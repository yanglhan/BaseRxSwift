//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 62 files.
  struct file {
    /// Resource file `Emoticons.bundle`.
    static let emoticonsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Emoticons", pathExtension: "bundle")
    /// Resource file `Expression.bundle`.
    static let expressionBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Expression", pathExtension: "bundle")
    /// Resource file `Expression.plist`.
    static let expressionPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Expression", pathExtension: "plist")
    /// Resource file `HUDAssets.bundle`.
    static let hudAssetsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "HUDAssets", pathExtension: "bundle")
    /// Resource file `LauguageExcel.xls`.
    static let lauguageExcelXls = Rswift.FileResource(bundle: R.hostingBundle, name: "LauguageExcel", pathExtension: "xls")
    /// Resource file `Light.plist`.
    static let lightPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Light", pathExtension: "plist")
    /// Resource file `Night.plist`.
    static let nightPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Night", pathExtension: "plist")
    /// Resource file `ToolViewEmotion@2x.png`.
    static let toolViewEmotion2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewEmotion@2x", pathExtension: "png")
    /// Resource file `ToolViewEmotion@3x.png`.
    static let toolViewEmotion3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewEmotion@3x", pathExtension: "png")
    /// Resource file `ToolViewEmotionHL@2x.png`.
    static let toolViewEmotionHL2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewEmotionHL@2x", pathExtension: "png")
    /// Resource file `ToolViewEmotionHL@3x.png`.
    static let toolViewEmotionHL3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewEmotionHL@3x", pathExtension: "png")
    /// Resource file `ToolViewInputVoice@2x.png`.
    static let toolViewInputVoice2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewInputVoice@2x", pathExtension: "png")
    /// Resource file `ToolViewInputVoice@3x.png`.
    static let toolViewInputVoice3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewInputVoice@3x", pathExtension: "png")
    /// Resource file `ToolViewInputVoiceHL@2x.png`.
    static let toolViewInputVoiceHL2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewInputVoiceHL@2x", pathExtension: "png")
    /// Resource file `ToolViewInputVoiceHL@3x.png`.
    static let toolViewInputVoiceHL3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewInputVoiceHL@3x", pathExtension: "png")
    /// Resource file `ToolViewKeyboard@2x.png`.
    static let toolViewKeyboard2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewKeyboard@2x", pathExtension: "png")
    /// Resource file `ToolViewKeyboard@3x.png`.
    static let toolViewKeyboard3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewKeyboard@3x", pathExtension: "png")
    /// Resource file `ToolViewKeyboardHL@2x.png`.
    static let toolViewKeyboardHL2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewKeyboardHL@2x", pathExtension: "png")
    /// Resource file `ToolViewKeyboardHL@3x.png`.
    static let toolViewKeyboardHL3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ToolViewKeyboardHL@3x", pathExtension: "png")
    /// Resource file `TypeSelectorBtnHL_Black@2x.png`.
    static let typeSelectorBtnHL_Black2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "TypeSelectorBtnHL_Black@2x", pathExtension: "png")
    /// Resource file `TypeSelectorBtnHL_Black@3x.png`.
    static let typeSelectorBtnHL_Black3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "TypeSelectorBtnHL_Black@3x", pathExtension: "png")
    /// Resource file `TypeSelectorBtn_Black@2x.png`.
    static let typeSelectorBtn_Black2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "TypeSelectorBtn_Black@2x", pathExtension: "png")
    /// Resource file `TypeSelectorBtn_Black@3x.png`.
    static let typeSelectorBtn_Black3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "TypeSelectorBtn_Black@3x", pathExtension: "png")
    /// Resource file `code.xls`.
    static let codeXls = Rswift.FileResource(bundle: R.hostingBundle, name: "code", pathExtension: "xls")
    /// Resource file `code_de.plist`.
    static let code_dePlist = Rswift.FileResource(bundle: R.hostingBundle, name: "code_de", pathExtension: "plist")
    /// Resource file `code_en.plist`.
    static let code_enPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "code_en", pathExtension: "plist")
    /// Resource file `code_ja.plist`.
    static let code_jaPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "code_ja", pathExtension: "plist")
    /// Resource file `code_ko.plist`.
    static let code_koPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "code_ko", pathExtension: "plist")
    /// Resource file `code_vi.plist`.
    static let code_viPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "code_vi", pathExtension: "plist")
    /// Resource file `code_zh.plist`.
    static let code_zhPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "code_zh", pathExtension: "plist")
    /// Resource file `exportCode.py`.
    static let exportCodePy = Rswift.FileResource(bundle: R.hostingBundle, name: "exportCode", pathExtension: "py")
    /// Resource file `exportToExcel.py`.
    static let exportToExcelPy = Rswift.FileResource(bundle: R.hostingBundle, name: "exportToExcel", pathExtension: "py")
    /// Resource file `func.sh`.
    static let funcSh = Rswift.FileResource(bundle: R.hostingBundle, name: "func", pathExtension: "sh")
    /// Resource file `ic_emotion_delete@2x.png`.
    static let ic_emotion_delete2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_emotion_delete@2x", pathExtension: "png")
    /// Resource file `ic_emotion_delete@3x.png`.
    static let ic_emotion_delete3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_emotion_delete@3x", pathExtension: "png")
    /// Resource file `ic_more_album@2x.png`.
    static let ic_more_album2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_album@2x", pathExtension: "png")
    /// Resource file `ic_more_album@3x.png`.
    static let ic_more_album3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_album@3x", pathExtension: "png")
    /// Resource file `ic_more_camera@2x.png`.
    static let ic_more_camera2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_camera@2x", pathExtension: "png")
    /// Resource file `ic_more_camera@3x.png`.
    static let ic_more_camera3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_camera@3x", pathExtension: "png")
    /// Resource file `ic_more_favorite@2x.png`.
    static let ic_more_favorite2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_favorite@2x", pathExtension: "png")
    /// Resource file `ic_more_favorite@3x.png`.
    static let ic_more_favorite3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_favorite@3x", pathExtension: "png")
    /// Resource file `ic_more_friendcard@2x.png`.
    static let ic_more_friendcard2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_friendcard@2x", pathExtension: "png")
    /// Resource file `ic_more_friendcard@3x.png`.
    static let ic_more_friendcard3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_friendcard@3x", pathExtension: "png")
    /// Resource file `ic_more_location@2x.png`.
    static let ic_more_location2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_location@2x", pathExtension: "png")
    /// Resource file `ic_more_location@3x.png`.
    static let ic_more_location3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_location@3x", pathExtension: "png")
    /// Resource file `ic_more_pay@2x.png`.
    static let ic_more_pay2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_pay@2x", pathExtension: "png")
    /// Resource file `ic_more_pay@3x.png`.
    static let ic_more_pay3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_pay@3x", pathExtension: "png")
    /// Resource file `ic_more_sight@2x.png`.
    static let ic_more_sight2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_sight@2x", pathExtension: "png")
    /// Resource file `ic_more_sight@3x.png`.
    static let ic_more_sight3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_sight@3x", pathExtension: "png")
    /// Resource file `ic_more_video@2x.png`.
    static let ic_more_video2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_video@2x", pathExtension: "png")
    /// Resource file `ic_more_video@3x.png`.
    static let ic_more_video3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_video@3x", pathExtension: "png")
    /// Resource file `ic_more_voice@2x.png`.
    static let ic_more_voice2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_voice@2x", pathExtension: "png")
    /// Resource file `ic_more_voice@3x.png`.
    static let ic_more_voice3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_voice@3x", pathExtension: "png")
    /// Resource file `ic_more_wallet@2x.png`.
    static let ic_more_wallet2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_wallet@2x", pathExtension: "png")
    /// Resource file `ic_more_wallet@3x.png`.
    static let ic_more_wallet3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "ic_more_wallet@3x", pathExtension: "png")
    /// Resource file `icon_emoji_expression@2x.png`.
    static let icon_emoji_expression2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "icon_emoji_expression@2x", pathExtension: "png")
    /// Resource file `icon_emoji_expression@3x.png`.
    static let icon_emoji_expression3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "icon_emoji_expression@3x", pathExtension: "png")
    /// Resource file `icon_qrc_border@3x.png`.
    static let icon_qrc_border3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "icon_qrc_border@3x", pathExtension: "png")
    /// Resource file `icon_qrc_line@3x.png`.
    static let icon_qrc_line3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "icon_qrc_line@3x", pathExtension: "png")
    /// Resource file `importCode.py`.
    static let importCodePy = Rswift.FileResource(bundle: R.hostingBundle, name: "importCode", pathExtension: "py")
    /// Resource file `importLocalizable.py`.
    static let importLocalizablePy = Rswift.FileResource(bundle: R.hostingBundle, name: "importLocalizable", pathExtension: "py")
    /// Resource file `localVideo0.mp4`.
    static let localVideo0Mp4 = Rswift.FileResource(bundle: R.hostingBundle, name: "localVideo0", pathExtension: "mp4")

    /// `bundle.url(forResource: "Emoticons", withExtension: "bundle")`
    static func emoticonsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.emoticonsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Expression", withExtension: "bundle")`
    static func expressionBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.expressionBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Expression", withExtension: "plist")`
    static func expressionPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.expressionPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "HUDAssets", withExtension: "bundle")`
    static func hudAssetsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.hudAssetsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "LauguageExcel", withExtension: "xls")`
    static func lauguageExcelXls(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lauguageExcelXls
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Light", withExtension: "plist")`
    static func lightPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.lightPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Night", withExtension: "plist")`
    static func nightPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.nightPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewEmotion@2x", withExtension: "png")`
    static func toolViewEmotion2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewEmotion2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewEmotion@3x", withExtension: "png")`
    static func toolViewEmotion3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewEmotion3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewEmotionHL@2x", withExtension: "png")`
    static func toolViewEmotionHL2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewEmotionHL2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewEmotionHL@3x", withExtension: "png")`
    static func toolViewEmotionHL3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewEmotionHL3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewInputVoice@2x", withExtension: "png")`
    static func toolViewInputVoice2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewInputVoice2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewInputVoice@3x", withExtension: "png")`
    static func toolViewInputVoice3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewInputVoice3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewInputVoiceHL@2x", withExtension: "png")`
    static func toolViewInputVoiceHL2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewInputVoiceHL2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewInputVoiceHL@3x", withExtension: "png")`
    static func toolViewInputVoiceHL3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewInputVoiceHL3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewKeyboard@2x", withExtension: "png")`
    static func toolViewKeyboard2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewKeyboard2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewKeyboard@3x", withExtension: "png")`
    static func toolViewKeyboard3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewKeyboard3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewKeyboardHL@2x", withExtension: "png")`
    static func toolViewKeyboardHL2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewKeyboardHL2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ToolViewKeyboardHL@3x", withExtension: "png")`
    static func toolViewKeyboardHL3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.toolViewKeyboardHL3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TypeSelectorBtnHL_Black@2x", withExtension: "png")`
    static func typeSelectorBtnHL_Black2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.typeSelectorBtnHL_Black2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TypeSelectorBtnHL_Black@3x", withExtension: "png")`
    static func typeSelectorBtnHL_Black3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.typeSelectorBtnHL_Black3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TypeSelectorBtn_Black@2x", withExtension: "png")`
    static func typeSelectorBtn_Black2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.typeSelectorBtn_Black2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "TypeSelectorBtn_Black@3x", withExtension: "png")`
    static func typeSelectorBtn_Black3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.typeSelectorBtn_Black3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "code", withExtension: "xls")`
    static func codeXls(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.codeXls
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "code_de", withExtension: "plist")`
    static func code_dePlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.code_dePlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "code_en", withExtension: "plist")`
    static func code_enPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.code_enPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "code_ja", withExtension: "plist")`
    static func code_jaPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.code_jaPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "code_ko", withExtension: "plist")`
    static func code_koPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.code_koPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "code_vi", withExtension: "plist")`
    static func code_viPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.code_viPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "code_zh", withExtension: "plist")`
    static func code_zhPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.code_zhPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "exportCode", withExtension: "py")`
    static func exportCodePy(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.exportCodePy
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "exportToExcel", withExtension: "py")`
    static func exportToExcelPy(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.exportToExcelPy
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "func", withExtension: "sh")`
    static func funcSh(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.funcSh
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_emotion_delete@2x", withExtension: "png")`
    static func ic_emotion_delete2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_emotion_delete2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_emotion_delete@3x", withExtension: "png")`
    static func ic_emotion_delete3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_emotion_delete3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_album@2x", withExtension: "png")`
    static func ic_more_album2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_album2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_album@3x", withExtension: "png")`
    static func ic_more_album3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_album3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_camera@2x", withExtension: "png")`
    static func ic_more_camera2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_camera2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_camera@3x", withExtension: "png")`
    static func ic_more_camera3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_camera3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_favorite@2x", withExtension: "png")`
    static func ic_more_favorite2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_favorite2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_favorite@3x", withExtension: "png")`
    static func ic_more_favorite3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_favorite3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_friendcard@2x", withExtension: "png")`
    static func ic_more_friendcard2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_friendcard2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_friendcard@3x", withExtension: "png")`
    static func ic_more_friendcard3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_friendcard3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_location@2x", withExtension: "png")`
    static func ic_more_location2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_location2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_location@3x", withExtension: "png")`
    static func ic_more_location3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_location3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_pay@2x", withExtension: "png")`
    static func ic_more_pay2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_pay2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_pay@3x", withExtension: "png")`
    static func ic_more_pay3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_pay3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_sight@2x", withExtension: "png")`
    static func ic_more_sight2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_sight2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_sight@3x", withExtension: "png")`
    static func ic_more_sight3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_sight3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_video@2x", withExtension: "png")`
    static func ic_more_video2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_video2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_video@3x", withExtension: "png")`
    static func ic_more_video3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_video3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_voice@2x", withExtension: "png")`
    static func ic_more_voice2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_voice2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_voice@3x", withExtension: "png")`
    static func ic_more_voice3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_voice3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_wallet@2x", withExtension: "png")`
    static func ic_more_wallet2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_wallet2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ic_more_wallet@3x", withExtension: "png")`
    static func ic_more_wallet3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.ic_more_wallet3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "icon_emoji_expression@2x", withExtension: "png")`
    static func icon_emoji_expression2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon_emoji_expression2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "icon_emoji_expression@3x", withExtension: "png")`
    static func icon_emoji_expression3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon_emoji_expression3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "icon_qrc_border@3x", withExtension: "png")`
    static func icon_qrc_border3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon_qrc_border3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "icon_qrc_line@3x", withExtension: "png")`
    static func icon_qrc_line3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon_qrc_line3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "importCode", withExtension: "py")`
    static func importCodePy(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.importCodePy
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "importLocalizable", withExtension: "py")`
    static func importLocalizablePy(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.importLocalizablePy
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "localVideo0", withExtension: "mp4")`
    static func localVideo0Mp4(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.localVideo0Mp4
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 59 images.
  struct image {
    /// Image `LaunchImage`.
    static let launchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage")
    /// Image `MessageVideoDownload`.
    static let messageVideoDownload = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessageVideoDownload")
    /// Image `MessageVideoPlay`.
    static let messageVideoPlay = Rswift.ImageResource(bundle: R.hostingBundle, name: "MessageVideoPlay")
    /// Image `ReceiverImageNodeBorder`.
    static let receiverImageNodeBorder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ReceiverImageNodeBorder")
    /// Image `ToolViewEmotionHL`.
    static let toolViewEmotionHL = Rswift.ImageResource(bundle: R.hostingBundle, name: "ToolViewEmotionHL")
    /// Image `ToolViewEmotion`.
    static let toolViewEmotion = Rswift.ImageResource(bundle: R.hostingBundle, name: "ToolViewEmotion")
    /// Image `ToolViewInputVoiceHL`.
    static let toolViewInputVoiceHL = Rswift.ImageResource(bundle: R.hostingBundle, name: "ToolViewInputVoiceHL")
    /// Image `ToolViewInputVoice`.
    static let toolViewInputVoice = Rswift.ImageResource(bundle: R.hostingBundle, name: "ToolViewInputVoice")
    /// Image `ToolViewKeyboardHL`.
    static let toolViewKeyboardHL = Rswift.ImageResource(bundle: R.hostingBundle, name: "ToolViewKeyboardHL")
    /// Image `ToolViewKeyboard`.
    static let toolViewKeyboard = Rswift.ImageResource(bundle: R.hostingBundle, name: "ToolViewKeyboard")
    /// Image `TypeSelectorBtnHL_Black`.
    static let typeSelectorBtnHL_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "TypeSelectorBtnHL_Black")
    /// Image `TypeSelectorBtn_Black`.
    static let typeSelectorBtn_Black = Rswift.ImageResource(bundle: R.hostingBundle, name: "TypeSelectorBtn_Black")
    /// Image `ic_avatar_placeholder`.
    static let ic_avatar_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_avatar_placeholder")
    /// Image `ic_emotion_delete`.
    static let ic_emotion_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_emotion_delete")
    /// Image `ic_group_placeholder`.
    static let ic_group_placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_group_placeholder")
    /// Image `ic_more_album`.
    static let ic_more_album = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_album")
    /// Image `ic_more_camera`.
    static let ic_more_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_camera")
    /// Image `ic_more_favorite`.
    static let ic_more_favorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_favorite")
    /// Image `ic_more_friendcard`.
    static let ic_more_friendcard = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_friendcard")
    /// Image `ic_more_location`.
    static let ic_more_location = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_location")
    /// Image `ic_more_pay`.
    static let ic_more_pay = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_pay")
    /// Image `ic_more_sight`.
    static let ic_more_sight = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_sight")
    /// Image `ic_more_video`.
    static let ic_more_video = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_video")
    /// Image `ic_more_voice`.
    static let ic_more_voice = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_voice")
    /// Image `ic_more_wallet`.
    static let ic_more_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_more_wallet")
    /// Image `ic_msg_forward_n`.
    static let ic_msg_forward_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_msg_forward_n")
    /// Image `ic_msg_forward_s`.
    static let ic_msg_forward_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_msg_forward_s")
    /// Image `ic_tabbar01_normal`.
    static let ic_tabbar01_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar01_normal")
    /// Image `ic_tabbar01_selected`.
    static let ic_tabbar01_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar01_selected")
    /// Image `ic_tabbar02_normal`.
    static let ic_tabbar02_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar02_normal")
    /// Image `ic_tabbar02_selected`.
    static let ic_tabbar02_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar02_selected")
    /// Image `ic_tabbar03_normal`.
    static let ic_tabbar03_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar03_normal")
    /// Image `ic_tabbar03_selected`.
    static let ic_tabbar03_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar03_selected")
    /// Image `ic_tabbar04_normal`.
    static let ic_tabbar04_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar04_normal")
    /// Image `ic_tabbar04_selected`.
    static let ic_tabbar04_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tabbar04_selected")
    /// Image `icon_arrow_right`.
    static let icon_arrow_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_arrow_right")
    /// Image `icon_emoji_expression`.
    static let icon_emoji_expression = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_emoji_expression")
    /// Image `icon_more_add`.
    static let icon_more_add = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_more_add")
    /// Image `icon_nav_back_white`.
    static let icon_nav_back_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_nav_back_white")
    /// Image `icon_qrc_border`.
    static let icon_qrc_border = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_qrc_border")
    /// Image `icon_qrc_line`.
    static let icon_qrc_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_qrc_line")
    /// Image `message_receiver_background_highlight`.
    static let message_receiver_background_highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_receiver_background_highlight")
    /// Image `message_receiver_background_normal`.
    static let message_receiver_background_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_receiver_background_normal")
    /// Image `message_receiver_background_reversed`.
    static let message_receiver_background_reversed = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_receiver_background_reversed")
    /// Image `message_sender_background_highlight`.
    static let message_sender_background_highlight = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_sender_background_highlight")
    /// Image `message_sender_background_normal`.
    static let message_sender_background_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_sender_background_normal")
    /// Image `message_sender_background_reversed`.
    static let message_sender_background_reversed = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_sender_background_reversed")
    /// Image `message_voice_receiver_normal`.
    static let message_voice_receiver_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_voice_receiver_normal")
    /// Image `message_voice_receiver_playing_1`.
    static let message_voice_receiver_playing_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_voice_receiver_playing_1")
    /// Image `message_voice_receiver_playing_2`.
    static let message_voice_receiver_playing_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_voice_receiver_playing_2")
    /// Image `message_voice_receiver_playing_3`.
    static let message_voice_receiver_playing_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_voice_receiver_playing_3")
    /// Image `message_voice_sender_normal`.
    static let message_voice_sender_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_voice_sender_normal")
    /// Image `message_voice_sender_playing_1`.
    static let message_voice_sender_playing_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_voice_sender_playing_1")
    /// Image `message_voice_sender_playing_2`.
    static let message_voice_sender_playing_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_voice_sender_playing_2")
    /// Image `message_voice_sender_playing_3`.
    static let message_voice_sender_playing_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "message_voice_sender_playing_3")
    /// Image `play_btn_normal`.
    static let play_btn_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "play_btn_normal")
    /// Image `play_btn_pressed`.
    static let play_btn_pressed = Rswift.ImageResource(bundle: R.hostingBundle, name: "play_btn_pressed")
    /// Image `player_back_button`.
    static let player_back_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_back_button")
    /// Image `player_suspend_button`.
    static let player_suspend_button = Rswift.ImageResource(bundle: R.hostingBundle, name: "player_suspend_button")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LaunchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MessageVideoDownload", bundle: ..., traitCollection: ...)`
    static func messageVideoDownload(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messageVideoDownload, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MessageVideoPlay", bundle: ..., traitCollection: ...)`
    static func messageVideoPlay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.messageVideoPlay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ReceiverImageNodeBorder", bundle: ..., traitCollection: ...)`
    static func receiverImageNodeBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.receiverImageNodeBorder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ToolViewEmotion", bundle: ..., traitCollection: ...)`
    static func toolViewEmotion(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolViewEmotion, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ToolViewEmotionHL", bundle: ..., traitCollection: ...)`
    static func toolViewEmotionHL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolViewEmotionHL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ToolViewInputVoice", bundle: ..., traitCollection: ...)`
    static func toolViewInputVoice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolViewInputVoice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ToolViewInputVoiceHL", bundle: ..., traitCollection: ...)`
    static func toolViewInputVoiceHL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolViewInputVoiceHL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ToolViewKeyboard", bundle: ..., traitCollection: ...)`
    static func toolViewKeyboard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolViewKeyboard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ToolViewKeyboardHL", bundle: ..., traitCollection: ...)`
    static func toolViewKeyboardHL(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.toolViewKeyboardHL, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TypeSelectorBtnHL_Black", bundle: ..., traitCollection: ...)`
    static func typeSelectorBtnHL_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.typeSelectorBtnHL_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "TypeSelectorBtn_Black", bundle: ..., traitCollection: ...)`
    static func typeSelectorBtn_Black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.typeSelectorBtn_Black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_avatar_placeholder", bundle: ..., traitCollection: ...)`
    static func ic_avatar_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_avatar_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_emotion_delete", bundle: ..., traitCollection: ...)`
    static func ic_emotion_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_emotion_delete, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_group_placeholder", bundle: ..., traitCollection: ...)`
    static func ic_group_placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_group_placeholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_album", bundle: ..., traitCollection: ...)`
    static func ic_more_album(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_album, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_camera", bundle: ..., traitCollection: ...)`
    static func ic_more_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_favorite", bundle: ..., traitCollection: ...)`
    static func ic_more_favorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_favorite, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_friendcard", bundle: ..., traitCollection: ...)`
    static func ic_more_friendcard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_friendcard, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_location", bundle: ..., traitCollection: ...)`
    static func ic_more_location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_location, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_pay", bundle: ..., traitCollection: ...)`
    static func ic_more_pay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_pay, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_sight", bundle: ..., traitCollection: ...)`
    static func ic_more_sight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_sight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_video", bundle: ..., traitCollection: ...)`
    static func ic_more_video(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_video, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_voice", bundle: ..., traitCollection: ...)`
    static func ic_more_voice(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_voice, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_more_wallet", bundle: ..., traitCollection: ...)`
    static func ic_more_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_more_wallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_msg_forward_n", bundle: ..., traitCollection: ...)`
    static func ic_msg_forward_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_msg_forward_n, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_msg_forward_s", bundle: ..., traitCollection: ...)`
    static func ic_msg_forward_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_msg_forward_s, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tabbar01_normal", bundle: ..., traitCollection: ...)`
    static func ic_tabbar01_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar01_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tabbar01_selected", bundle: ..., traitCollection: ...)`
    static func ic_tabbar01_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar01_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tabbar02_normal", bundle: ..., traitCollection: ...)`
    static func ic_tabbar02_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar02_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tabbar02_selected", bundle: ..., traitCollection: ...)`
    static func ic_tabbar02_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar02_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tabbar03_normal", bundle: ..., traitCollection: ...)`
    static func ic_tabbar03_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar03_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tabbar03_selected", bundle: ..., traitCollection: ...)`
    static func ic_tabbar03_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar03_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tabbar04_normal", bundle: ..., traitCollection: ...)`
    static func ic_tabbar04_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar04_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tabbar04_selected", bundle: ..., traitCollection: ...)`
    static func ic_tabbar04_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tabbar04_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_arrow_right", bundle: ..., traitCollection: ...)`
    static func icon_arrow_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_arrow_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_emoji_expression", bundle: ..., traitCollection: ...)`
    static func icon_emoji_expression(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_emoji_expression, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_more_add", bundle: ..., traitCollection: ...)`
    static func icon_more_add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_more_add, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_nav_back_white", bundle: ..., traitCollection: ...)`
    static func icon_nav_back_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_nav_back_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_qrc_border", bundle: ..., traitCollection: ...)`
    static func icon_qrc_border(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_qrc_border, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_qrc_line", bundle: ..., traitCollection: ...)`
    static func icon_qrc_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_qrc_line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_receiver_background_highlight", bundle: ..., traitCollection: ...)`
    static func message_receiver_background_highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_receiver_background_highlight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_receiver_background_normal", bundle: ..., traitCollection: ...)`
    static func message_receiver_background_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_receiver_background_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_receiver_background_reversed", bundle: ..., traitCollection: ...)`
    static func message_receiver_background_reversed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_receiver_background_reversed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_sender_background_highlight", bundle: ..., traitCollection: ...)`
    static func message_sender_background_highlight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_sender_background_highlight, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_sender_background_normal", bundle: ..., traitCollection: ...)`
    static func message_sender_background_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_sender_background_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_sender_background_reversed", bundle: ..., traitCollection: ...)`
    static func message_sender_background_reversed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_sender_background_reversed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_voice_receiver_normal", bundle: ..., traitCollection: ...)`
    static func message_voice_receiver_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_voice_receiver_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_voice_receiver_playing_1", bundle: ..., traitCollection: ...)`
    static func message_voice_receiver_playing_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_voice_receiver_playing_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_voice_receiver_playing_2", bundle: ..., traitCollection: ...)`
    static func message_voice_receiver_playing_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_voice_receiver_playing_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_voice_receiver_playing_3", bundle: ..., traitCollection: ...)`
    static func message_voice_receiver_playing_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_voice_receiver_playing_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_voice_sender_normal", bundle: ..., traitCollection: ...)`
    static func message_voice_sender_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_voice_sender_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_voice_sender_playing_1", bundle: ..., traitCollection: ...)`
    static func message_voice_sender_playing_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_voice_sender_playing_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_voice_sender_playing_2", bundle: ..., traitCollection: ...)`
    static func message_voice_sender_playing_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_voice_sender_playing_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "message_voice_sender_playing_3", bundle: ..., traitCollection: ...)`
    static func message_voice_sender_playing_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.message_voice_sender_playing_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play_btn_normal", bundle: ..., traitCollection: ...)`
    static func play_btn_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play_btn_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "play_btn_pressed", bundle: ..., traitCollection: ...)`
    static func play_btn_pressed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.play_btn_pressed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_back_button", bundle: ..., traitCollection: ...)`
    static func player_back_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_back_button, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "player_suspend_button", bundle: ..., traitCollection: ...)`
    static func player_suspend_button(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.player_suspend_button, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 3 localization keys.
    struct infoPlist {
      /// en translation: App requests your permission to access the photos in the gallery.
      ///
      /// Locales: en, zh-Hans, ko, vi, de, ja
      static let nsPhotoLibraryAddUsageDescription = Rswift.StringResource(key: "NSPhotoLibraryAddUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "ko", "vi", "de", "ja"], comment: nil)
      /// en translation: App requests your permission to access the photos in the gallery.
      ///
      /// Locales: en, zh-Hans, ko, vi, de, ja
      static let nsPhotoLibraryUsageDescription = Rswift.StringResource(key: "NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "ko", "vi", "de", "ja"], comment: nil)
      /// en translation: To scan the QR code, do you allow using the camera?
      ///
      /// Locales: en, zh-Hans, ko, vi, de, ja
      static let nsCameraUsageDescription = Rswift.StringResource(key: "NSCameraUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "ko", "vi", "de", "ja"], comment: nil)

      /// en translation: App requests your permission to access the photos in the gallery.
      ///
      /// Locales: en, zh-Hans, ko, vi, de, ja
      static func nsPhotoLibraryAddUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSPhotoLibraryAddUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSPhotoLibraryAddUsageDescription"
        }

        return NSLocalizedString("NSPhotoLibraryAddUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: App requests your permission to access the photos in the gallery.
      ///
      /// Locales: en, zh-Hans, ko, vi, de, ja
      static func nsPhotoLibraryUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSPhotoLibraryUsageDescription"
        }

        return NSLocalizedString("NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: To scan the QR code, do you allow using the camera?
      ///
      /// Locales: en, zh-Hans, ko, vi, de, ja
      static func nsCameraUsageDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "NSCameraUsageDescription"
        }

        return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 4 localization keys.
    struct localizable {
      /// en translation: IMChat
      ///
      /// Locales: en, zh-Hans, ko, vi, de, ja
      static let zero_app_display_name = Rswift.StringResource(key: "zero_app_display_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "ko", "vi", "de", "ja"], comment: nil)
      /// en translation: Tips
      ///
      /// Locales: en, zh-Hans, ko, vi, de, ja
      static let app_alert_title_reminder = Rswift.StringResource(key: "app_alert_title_reminder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "ko", "vi", "de", "ja"], comment: nil)
      /// en translation: cancel
      ///
      /// Locales: en, zh-Hans, ko, vi, de, ja
      static let app_alert_title_cancel = Rswift.StringResource(key: "app_alert_title_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "ko", "vi", "de", "ja"], comment: nil)
      /// en translation: confirm
      ///
      /// Locales: en, zh-Hans, ko, vi, de, ja
      static let app_alert_title_confirm = Rswift.StringResource(key: "app_alert_title_confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans", "ko", "vi", "de", "ja"], comment: nil)

      /// en translation: IMChat
      ///
      /// Locales: en, zh-Hans, ko, vi, de, ja
      static func zero_app_display_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("zero_app_display_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "zero_app_display_name"
        }

        return NSLocalizedString("zero_app_display_name", bundle: bundle, comment: "")
      }

      /// en translation: Tips
      ///
      /// Locales: en, zh-Hans, ko, vi, de, ja
      static func app_alert_title_reminder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("app_alert_title_reminder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "app_alert_title_reminder"
        }

        return NSLocalizedString("app_alert_title_reminder", bundle: bundle, comment: "")
      }

      /// en translation: cancel
      ///
      /// Locales: en, zh-Hans, ko, vi, de, ja
      static func app_alert_title_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("app_alert_title_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "app_alert_title_cancel"
        }

        return NSLocalizedString("app_alert_title_cancel", bundle: bundle, comment: "")
      }

      /// en translation: confirm
      ///
      /// Locales: en, zh-Hans, ko, vi, de, ja
      static func app_alert_title_confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("app_alert_title_confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "app_alert_title_confirm"
        }

        return NSLocalizedString("app_alert_title_confirm", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
